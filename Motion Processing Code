/************************************************************
  MPU9250_DMP_Gyro_Cal
  Gyro calibration example for MPU-9250 DMP Arduino Library
  Jim Lindblom @ SparkFun Electronics
  original creation date: November 23, 2016
  https://github.com/sparkfun/SparkFun_MPU9250_DMP_Arduino_Library

  This example sketch demonstrates how to use the MPU-9250's
  digital motion processor (DMP) to calibrate the gyroscope.
  After eight seconds of no motion, the DMP will compute
  gyro biases and subtract them.

  Development environment specifics:
  Arduino IDE 1.6.12
  SparkFun 9DoF Razor IMU M0

  Supported Platforms:
  - ATSAMD21 (Arduino Zero, SparkFun SAMD21 Breakouts)
*************************************************************/
#include <SparkFunMPU9250-DMP.h>
#define SerialPort SerialUSB
#define LEDPIN 13

MPU9250_DMP imu;

void setup()
{
  pinMode(LEDPIN, OUTPUT);
  SerialPort.begin(115200);

  // Call imu.begin() to verify communication and initialize
  if (imu.begin() != INV_SUCCESS)
  {
    while (1)
    {
      SerialPort.println("Unable to communicate with MPU-9250");
      SerialPort.println("Check connections, and try again.");
      SerialPort.println();
      delay(5000);
    }
  }

  // DMP_FEATURE_TAP -- Tap detection
  // DMP_FEATURE_ANDROID_ORIENT -- Orientation (portrait/landscape) detection
  // DMP_FEATURE_LP_QUAT -- Accelerometer, low-power quaternion calculation
  // DMP_FEATURE_PEDOMETER -- Pedometer (always enabled)
  // DMP_FEATURE_6X_LP_QUAT -- 6-axis (accel/gyro) quaternion calculation
  // DMP_FEATURE_GYRO_CAL -- Gyroscope calibration (0's out after 8 seconds of no motion)
  // DMP_FEATURE_SEND_RAW_ACCEL -- Send raw accelerometer values to FIFO
  // DMP_FEATURE_SEND_RAW_GYRO -- Send raw gyroscope values to FIFO
  // DMP_FEATURE_SEND_CAL_GYRO -- Send calibrated gyroscop values to FIFO
  imu.dmpBegin(DMP_FEATURE_SEND_RAW_ACCEL |
               DMP_FEATURE_GYRO_CAL |        // Enable gyro calibration
               DMP_FEATURE_SEND_CAL_GYRO |   // Send calibrated gyro values
               DMP_FEATURE_6X_LP_QUAT,
               50);                   // Set DMP rate in Hz
}

static void toEulerianAngle(float w, float x, float y, float z, double& roll, double& pitch, double& yaw)
{
  double ysqr = y * y;

  // roll (x-axis rotation)
  double t0 = +2.0 * (w * x + y * z);  
  double t1 = +1.0 - 2.0 * (x * x + ysqr); 
  roll = atan2(t0, t1) * (180.0/PI); 

  // pitch (y-axis rotation)
  double t2 = +2.0 * (w * y - z * x);
  t2 = t2 > 1.0 ? 1.0 : t2;
  t2 = t2 < -1.0 ? -1.0 : t2;
  pitch = asin(t2) * (180.0/PI);

  // yaw (z-axis rotation)
  double t3 = +2.0 * (w * z + x * y);
  double t4 = +1.0 - 2.0 * (ysqr + z * z);  
  yaw = atan2(t3, t4) * (180.0/PI);
}


void loop()
{
  // Check for new data in the FIFO
  if ( imu.fifoAvailable() )
  {
    // Use dmpUpdateFifo to update the ax, gx, mx, etc. values
    if ( imu.dmpUpdateFifo() == INV_SUCCESS)
    {
      String imuLog = ""; // Create a fresh line to log
      double roll;
      double pitch;
      double yaw;
      toEulerianAngle(imu.calcQuat(imu.qw), imu.calcQuat(imu.qx), imu.calcQuat(imu.qy), imu.calcQuat(imu.qz), roll, pitch, yaw);
      imuLog += String(roll, 6) + ",";
      imuLog += String(pitch, 6) + ",";
      imuLog += String(yaw, 6) + ",";
      SerialPort.println(imuLog);
    }
  }
}
